!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.rbac=r():e.rbac=r()}(window,(function(){return function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=0)}([function(e,r,t){"use strict";r.__esModule=!0;var n=function(){function e(e){this.users={},this.roles={},this.debug=void 0!==e.debug&&e.debug,this.roles=e.rolesConfig.reduce((function(e,r){for(var t=0,n=r.roles;t<n.length;t++){e[n[t]]=r.permissions}return e}),{})}return e.prototype.getUserRoles=function(e){return e?this.users[e]?this.users[e]:this.generateError(e+" userId is not defined, please add a user to the RBAC using addUserRoles method"):this.generateError("userId is not defined, expected 1 arguments")},e.prototype.addUserRoles=function(e,r){if(!e||!r)return this.generateError("userId or roles is not defined, expected 2 arguments");if(0===r.length)return this.generateError("roles length is 0, expected at least 1");for(var t=0,n=r;t<n.length;t++){var o=n[t];if(!this.roles[o])return this.generateError(o+" role is not defined in initial config");this.users[e]?this.users[e].includes(o)||this.users[e].push(o):this.users[e]=[o]}},e.prototype.removeUserRoles=function(e,r){if(!e)return this.generateError("userId is not defined, expected 1 arguments");if(!this.users[e])return this.generateError(e+" userId is not defined, please add a user to the RBAC using addUserRoles method");if(r)for(var t=0,n=r;t<n.length;t++){var o=n[t],s=this.users[e].indexOf(o);s+1&&this.users[e].splice(s,1)}else delete this.users[e]},e.prototype.isAllowed=function(e,r){var t=this;if(!e||!r)return this.generateError("userId or permissionId is not defined, expected 2 arguments");var n=this.users[e];return n?n.some((function(e){return t.roles[e].includes(r)})):this.generateError(e+" userId is nor defined, please add user to the RBAC using addUserRoles method")},e.prototype.extendRole=function(e,r){if(!e||!r)return this.generateError("role or extendingRoles is not defined, expected 2 arguments");if(0===r.length)return this.generateError("extendingRoles length is 0, expected at least 1");if(!this.roles[e])return this.generateError(e+" role is not defined in the initial config");for(var t=0,n=r;t<n.length;t++){var o=n[t];if(!this.roles[o])return this.generateError(e+" role is not defined in the initial config");this.roles[e]=this.roles[e].concat(this.roles[o])}},e.prototype.middleware=function(e,r,t){if(!e||!r||!t)return r(),this.generateError("one of the incoming parameters is not defined, expected 3 arguments");this.isAllowed(e.userId,e.permissionId)?t():r()},e.prototype.generateError=function(e){return this.debug&&console.warn(e),new Error(e)},e}();r.RBAC=n,r.default=n}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,